@page "/"
@using CertificationsQuiz.Infrastructure
@inject IQuizService quizService

<h1>Certification Quizzes</h1>

<a class="btn btn-primary" href="/quiz/new" role="button">Create Quiz</a>

@if (_quizzes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th>Certification</th>
            <th>Section</th>
            <th>Subsection</th>
            <th>Topic</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var quiz in _quizzes)
        {
            <tr>
                <td><input type="checkbox" @onchange="eventArgs => { CheckboxClicked(quiz, eventArgs.Value); }" /></td>
                <td>@quiz.Certification</td>
                <td>@quiz.Section</td>
                <td>@quiz.Subsection</td>
                <td>@quiz.Topic</td>
                <td><a href="/Quiz/@quiz.Id/Edit"><span class="material-icons">edit</span></a></td>
                <td><a href="/Quiz/@quiz.Id/Questions"><span class="material-icons">quiz</span></a></td>
                <td><a href="#" @onclick="() => DeleteQuiz(quiz.Id)"><span class="material-icons">delete</span></a></td>
            </tr>
        }
        </tbody>
    </table>

    @if(_checkedQuizzes.Any())
    {
        <a class="btn btn-primary" href="/TakeQuiz/@string.Join("&", _checkedQuizzes)" role="button">Take Quiz</a>
    }
}

@code
{
    IEnumerable<Quiz> _quizzes;
    IEnumerable<string> _checkedQuizzes =  new List<string>();

    protected override async Task OnInitializedAsync() => _quizzes = await quizService.Get();

    async Task DeleteQuiz(string id)
    {
        await quizService.Delete(id);
        _quizzes = _quizzes.Where(x => x.Id != id);
    }

    void CheckboxClicked(Quiz quiz, object checkedValue) 
        => _checkedQuizzes = (bool)checkedValue ? _checkedQuizzes.Append(quiz.Id) : _checkedQuizzes.Where(x => x != quiz.Id);
}
